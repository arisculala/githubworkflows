name: Publish and Deploy Prod

on:
  release:
    types: [published]  # Trigger when a release is published
  workflow_dispatch:  # Allows manual triggering from the GitHub Actions UI
    inputs:
      release_version:
        description: 'The version of the release'
        required: true
        default: '0.0.1'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          ref: main # Ensures the 'main' branch is checked out

      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ap-southeast-3

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true
          registry-type: private
          skip-logout: false

      - name: Build and Push Docker Image
        run: |
          echo "Building Docker image..."
          docker build -t ${{ secrets.ECR_REPOSITORY_NAME }}:${{ github.event.inputs.release_version }} .
          echo "Tagging Docker image..."
          docker tag ${{ secrets.ECR_REPOSITORY_NAME }}:${{ github.event.inputs.release_version }} ${{ secrets.ACCOUNT_ID }}.dkr.ecr.ap-southeast-3.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:${{ github.event.inputs.release_version }}
          echo "Pushing Docker image..."
          docker push ${{ secrets.ACCOUNT_ID }}.dkr.ecr.ap-southeast-3.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:${{ github.event.inputs.release_version }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy to EC2
        run: |
          echo "Deploying ECR image to EC2..."
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_PUBLIC_IP }} \
            'aws ecr get-login-password --region ap-southeast-3 | docker login --username AWS --password-stdin ${{ secrets.ACCOUNT_ID }}.dkr.ecr.ap-southeast-3.amazonaws.com && \
            docker pull ${{ secrets.ACCOUNT_ID }}.dkr.ecr.ap-southeast-3.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:${{ github.event.inputs.release_version }} && \
            
            # Stop and remove the old container if it exists
            if [ "$(docker ps -q -f name=my_app_container)" ]; then docker stop my_app_container && docker rm my_app_container; fi && \

            # Run the new container with a specific name
            docker run -d --name my_app_container -p 4000:4000 \
            ${{ secrets.ACCOUNT_ID }}.dkr.ecr.ap-southeast-3.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:${{ github.event.inputs.release_version }}'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
